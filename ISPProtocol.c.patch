--- ./Lib/ISP/ISPProtocol.c.orig	2012-05-07 06:56:49.073034574 +0200
+++ ./Lib/ISP/ISPProtocol.c	2012-05-07 07:20:36.449824595 +0200
@@ -57,7 +57,13 @@
 	Endpoint_Read_Stream_LE(&Enter_ISP_Params, sizeof(Enter_ISP_Params), NULL);
 
 	Endpoint_ClearOUT();
-	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
+
+	if ( use_libusb ) {
+		Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM__LIBUSB);
+	} else {
+		Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM__DEFAULT);
+	}
+
 	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);
 
 	uint8_t ResponseStatus = STATUS_CMD_FAILED;
@@ -115,7 +121,13 @@
 	Endpoint_Read_Stream_LE(&Leave_ISP_Params, sizeof(Leave_ISP_Params), NULL);
 
 	Endpoint_ClearOUT();
-	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
+
+	if ( use_libusb ) {
+		Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM__LIBUSB);
+	} else {
+		Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM__DEFAULT);
+	}
+
 	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);
 
 	/* Perform pre-exit delay, release the target /RESET, disable the SPI bus and perform the post-exit delay */
@@ -154,7 +166,13 @@
 	if (Write_Memory_Params.BytesToWrite > sizeof(Write_Memory_Params.ProgData))
 	{
 		Endpoint_ClearOUT();
-		Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
+
+		if ( use_libusb ) {
+			Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM__LIBUSB);
+		} else {
+			Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM__DEFAULT);
+		}
+
 		Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);
 
 		Endpoint_Write_8(V2Command);
@@ -175,7 +193,13 @@
 	}
 
 	Endpoint_ClearOUT();
-	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
+
+	if ( use_libusb ) {
+		Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM__LIBUSB);
+	} else {
+		Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM__DEFAULT);
+	}
+	
 	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);
 
 	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
@@ -295,7 +319,13 @@
 	Read_Memory_Params.BytesToRead = SwapEndian_16(Read_Memory_Params.BytesToRead);
 
 	Endpoint_ClearOUT();
-	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
+
+	if ( use_libusb ) {
+		Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM__LIBUSB);
+	} else {
+		Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM__DEFAULT);
+	}
+
 	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);
 
 	Endpoint_Write_8(V2Command);
@@ -368,7 +398,13 @@
 	Endpoint_Read_Stream_LE(&Erase_Chip_Params, sizeof(Erase_Chip_Params), NULL);
 
 	Endpoint_ClearOUT();
-	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
+
+	if ( use_libusb ) {
+		Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM__LIBUSB);
+	} else {
+		Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM__DEFAULT);
+	}
+
 	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);
 
 	uint8_t ResponseStatus = STATUS_CMD_OK;
@@ -404,7 +440,13 @@
 	Endpoint_Read_Stream_LE(&Read_FuseLockSigOSCCAL_Params, sizeof(Read_FuseLockSigOSCCAL_Params), NULL);
 
 	Endpoint_ClearOUT();
-	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
+
+	if ( use_libusb ) {
+		Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM__LIBUSB);
+	} else {
+		Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM__DEFAULT);
+	}
+	
 	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);
 
 	uint8_t ResponseBytes[4];
@@ -435,7 +477,13 @@
 	Endpoint_Read_Stream_LE(&Write_FuseLockSig_Params, sizeof(Write_FuseLockSig_Params), NULL);
 
 	Endpoint_ClearOUT();
-	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
+
+	if ( use_libusb ) {
+		Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM__LIBUSB);
+	} else {
+		Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM__DEFAULT);
+	}
+
 	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);
 
 	/* Send the Fuse or Lock byte program commands as given by the host to the device */
@@ -463,7 +511,13 @@
 	Endpoint_Read_Stream_LE(&SPI_Multi_Params.TxData, SPI_Multi_Params.TxBytes, NULL);
 
 	Endpoint_ClearOUT();
-	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
+
+	if ( use_libusb ) {
+		Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM__LIBUSB);
+	} else {
+		Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM__DEFAULT);
+	}
+	
 	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);
 
 	Endpoint_Write_8(CMD_SPI_MULTI);
